name: Deploy to AWS

on:
  push:
    branches: [main]
  workflow_dispatch: # Permite trigger manual

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: spacex-app
  ECS_SERVICE: spacex-app-service
  ECS_CLUSTER: spacex-app-cluster

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create environment files
        run: |
          # Crear .env para frontend
          cat > frontend/.env.production << EOF
          VUE_APP_API_BASE_URL=${{ secrets.VUE_APP_API_BASE_URL }}
          NODE_ENV=production
          EOF

          # Crear .env para backend
          cat > backend/.env << EOF
          AWS_ACCESS_KEY_ID=${{ secrets.BACKEND_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.BACKEND_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ env.AWS_REGION }}
          DYNAMODB_TABLE_NAME=${{ secrets.DYNAMODB_TABLE_NAME }}
          ENVIRONMENT=production
          DEBUG=False
          EOF

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build para AMD64 (requerido por ECS)
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region $AWS_REGION

      - name: Get ALB DNS name
        id: get-alb
        run: |
          echo "Searching for ALB..."
          ALB_DNS=$(aws elbv2 describe-load-balancers --names spacex-app-alb --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")

          if [ -z "$ALB_DNS" ] || [ "$ALB_DNS" = "None" ]; then
            echo "ALB not found by name, searching by tag..."
            ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `spacex-app`)].DNSName | [0]' --output text)
          fi

          if [ -z "$ALB_DNS" ] || [ "$ALB_DNS" = "None" ]; then
            echo "ERROR: Could not find ALB DNS name"
            exit 1
          fi

          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "ALB DNS found: $ALB_DNS"

      - name: Verify deployment
        run: |
          # Esperar un poco más para asegurar que esté listo
          sleep 30

          # Test health endpoint con URL dinámica
          ALB_DNS="${{ steps.get-alb.outputs.alb_dns }}"
          ALB_URL="http://$ALB_DNS"

          echo "ALB DNS from previous step: $ALB_DNS"
          echo "Testing health endpoint: $ALB_URL/health"

          # Verificar que ALB_DNS no esté vacío
          if [ -z "$ALB_DNS" ]; then
            echo "ERROR: ALB DNS is empty"
            exit 1
          fi

          if curl -f --connect-timeout 10 --max-time 30 "$ALB_URL/health"; then
            echo "Health check passed!"
          else
            echo "Health check failed, checking if app is accessible..."
            echo "Trying root endpoint: $ALB_URL/"
            curl -v --connect-timeout 10 --max-time 30 "$ALB_URL/" || echo "App not accessible"
            
            echo "Checking ECS service status..."
            aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].{running:runningCount,desired:desiredCount,status:status}'
            
            exit 1
          fi

          echo "Deployment successful!"

      - name: Notify deployment status
        if: always()
        run: |
          ALB_DNS="${{ steps.get-alb.outputs.alb_dns }}"
          ALB_URL="http://$ALB_DNS"

          if [ ${{ job.status }} == 'success' ]; then
            echo "Deployment completed successfully!"
            echo "App URL: $ALB_URL"
          else
            echo "Deployment failed!"
          fi
          echo "ALB DNS: $ALB_DNS"
