name: Deploy to AWS

on:
  push:
    branches: [main]
  workflow_dispatch: # Permite trigger manual

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL }}
  ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
  ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
  ALB_URL: ${{ secrets.ALB_NAME }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run tests
        run: |
          cd backend
          pytest app/tests/ -v

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create environment files
        run: |
          # Crear .env para frontend
          cat > frontend/.env.production << EOF
          VUE_APP_API_BASE_URL=${{ secrets.VUE_APP_API_BASE_URL }}
          NODE_ENV=production
          EOF

          # Crear .env para backend
          cat > backend/.env << EOF
          AWS_ACCESS_KEY_ID=${{ secrets.BACKEND_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.BACKEND_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ env.AWS_REGION }}
          DYNAMODB_TABLE_NAME=${{ secrets.DYNAMODB_TABLE_NAME }}
          ENVIRONMENT=production
          DEBUG=False
          EOF

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build para AMD64 (requerido por ECS)
          docker buildx build --platform linux/amd64 \
            -t ${{ env.ECR_REPOSITORY_URL }}:$IMAGE_TAG \
            -t ${{ env.ECR_REPOSITORY_URL }}:latest \
            --push .

          echo "image=${{ env.ECR_REPOSITORY_URL }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER_NAME \
            --services $ECS_SERVICE_NAME \
            --region $AWS_REGION

      - name: Verify deployment
        run: |
          # Esperar un poco m√°s para asegurar que est√© listo
          sleep 30

          # Test health endpoint
          curl -f http://${{ env.ALB_URL }}/health || exit 1
          echo "‚úÖ Deployment successful!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üöÄ Deployment completed successfully!"
            echo "üåê App URL: http://${{ env.ALB_URL }}"
          else
            echo "‚ùå Deployment failed!"
          fi
